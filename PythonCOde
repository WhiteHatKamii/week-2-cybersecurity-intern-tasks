# Install pycryptodome (only required once)
!pip install pycryptodome

# Import necessary modules
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import base64

# Padding function for AES (ensures message length is a multiple of 16 bytes)
def pad_message(message):
    while len(message) % 16 != 0:
        message += ' '
    return message

# Function to encrypt a message
def encrypt_message(key, message):
    cipher = AES.new(key, AES.MODE_ECB)
    padded_message = pad_message(message)
    encrypted = cipher.encrypt(padded_message.encode('utf-8'))
    return base64.b64encode(encrypted).decode('utf-8')

# Function to decrypt a message
def decrypt_message(key, encrypted_message):
    cipher = AES.new(key, AES.MODE_ECB)
    decoded_encrypted_message = base64.b64decode(encrypted_message)
    decrypted = cipher.decrypt(decoded_encrypted_message).decode('utf-8')
    return decrypted.strip()

# Key must be 16, 24, or 32 bytes long
key = get_random_bytes(16)  # Secure random key generation
message = "Developers Hub Intern."

# Encrypt the message
encrypted_message = encrypt_message(key, message)
print("Encrypted Message:", encrypted_message)

# Decrypt the message
decrypted_message = decrypt_message(key, encrypted_message)
print("Decrypted Message:", decrypted_message)
